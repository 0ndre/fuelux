---
layout: default
title: Javascript
slug: javascript
lead: "Over a dozen reusable controls built to provide datepickers, pillboxes, trees, wizards, and much more."
---

<!-- Overview
================================================== -->
<div class="bs-docs-section">
  <h1 id="js-overview" class="page-header">Overview</h1>

  <h3 id="js-individual-compiled">Individual or compiled</h3>
  <p>Components can be included individually (using FuelUX's individual <code>*.js</code> files), or all at once (using <code>fuelux.js</code> or the minified <code>fuelux.min.js</code>).</p>

  <div class="bs-callout bs-callout-danger">
    <h4>Using the compiled JavaScript</h4>
    <p>Both <code>fuelux.js</code> and <code>fuelux.min.js</code> contain all plugins in a single file. Include only one.</p>
  </div>

  <div class="bs-callout bs-callout-danger">
    <h4>Plugin dependencies</h4>
    <p>Some components depend on other components. If you include components individually, make sure to check for these dependencies in the docs below. An error should be thrown if dependencies are not met. Also note that all plugins depend on jQuery and Bootstrap (this means jQuery and Boostrap must be included <strong>before</strong> the components files). <a href="{{ site.repo }}/blob/v{{ site.current_version }}/bower.json">Consult our <code>bower.json</code></a> to see which versions of jQuery and Bootstrap are supported.</p>
  </div>

  <h3 id="js-class-triggers">Selector-based initialization</h3>
  <p>You can initialize all FuelUX components on page load purely through markup without writing a single line of JavaScript by adding its respective class as a descendant of <code>.fuelux</code>.</p>

  <p>Alternatively, you can initialize a specific component like this at any time:</p>
{% highlight js %}
$('#myElement').selectlist();
{% endhighlight %}

  <p>All methods should accept an optional options object, a string which targets a particular method, or nothing (which initiates a plugin with default behavior):</p>
{% highlight js %}
$('#myElement').wizard()                      // initialized with defaults
$('#myElement').wizard('selectedItem', { step: 3 });)   // initialized with selectedItem
$('#myElement').wizard('show')                // initializes and invokes show immediately
{% endhighlight %}

  <p>Each plugin also exposes its raw constructor on a <code>Constructor</code> property: <code>$.fn.popover.Constructor</code>.</p>

  <h3 id="js-events">Events</h3>
  <p>FuelUX provides custom events for most components unique actions. Generally, these come in an infinitive and past form - where the infinitive (ex. <code>show</code>) is triggered at the start of an event, and its past form (ex. <code>changed</code>) is trigger on the completion of an action.</p>
  <p>As of 3.0.0, all FuelUX events are namespaced.</p>

  <div class="bs-callout bs-callout-warning" id="callout-third-party-libs">
    <h4>Third-party libraries</h4>
    <p><strong>Bootstrap does not officially support third-party JavaScript libraries</strong> like Prototype or jQuery UI. Despite <code>.noConflict</code> and namespaced events, there may be compatibility problems that you need to fix on your own.</p>
  </div>
</div>

{% include js/checkbox.html %}

<<<<<<< HEAD
<!-- checkbox
================================================== -->
<div class="bs-docs-section">
    <h1 id="checkboxes" class="page-header">Checkboxes <small>checkboxes.js</small></h1>

    <h2 id="checkboxes-examples">Examples</h2>
    <p>Browser-independent look and feel for checkbox element.</p>

    <h4>Default (stacked)</h4>
    <div class="bs-example">
        
        <div class="checkbox">
            <label class="checkbox-custom">
                <input type="checkbox" value="option1">
                <span class="checkbox-label">Browser-independent checkbox unchecked on page load</span>
            </label>
        </div>
        <div class="checkbox">
            <label class="checkbox-custom">
                <input checked="checked" type="checkbox" value="option2">
                <span class="checkbox-label">Browser-independent checkbox checked on page load</span>
            </label>
        </div>
        <div class="checkbox">
            <label class="checkbox-custom">
                <input disabled="disabled" type="checkbox" value="option3">
                <span class="checkbox-label">Disabled browser-independent checkbox unchecked on page load</span>
            </label>
        </div>
        <div class="checkbox">
            <label class="checkbox-custom">
                <input checked="checked" disabled="disabled" type="checkbox" value="option4">
                <span class="checkbox-label">Disabled browser-independent checkbox checked on page load</span>
            </label>
        </div>

    </div>

{% highlight html %}
<div class="checkbox">
  <label class="checkbox-custom">
    <input type="checkbox" value="">
    <span class="checkbox-label">Browser-independent checkbox unchecked on page load</span>
  </label>
</div>
<div class="checkbox">
  <label class="checkbox-custom">
    <input checked="checked" type="checkbox" value="">
    <span class="checkbox-label">Browser-independent checkbox checked on page load</span>
  </label>
</div>
<div class="checkbox">
  <label class="checkbox-custom">
    <input disabled="disabled" type="checkbox" value="">
    <span class="checkbox-label">Disabled browser-independent checkbox unchecked on page load</span>
  </label>
</div>
<div class="checkbox">
  <label class="checkbox-custom">
    <input checked="checked" disabled="disabled" type="checkbox" value="">
    <span class="checkbox-label">Disabled browser-independent checkbox checked on page load</span>
  </label>
</div>
{% endhighlight %}

    <h4>Inline checkboxes</h4>
    <p>Use the <code>.checkbox-inline</code> or <code>.radio-inline</code> classes on a series of checkboxes or radios for controls that appear on the same line.</p>
    <div class="bs-example">
        <label class="checkbox-custom checkbox-inline">
            <input type="checkbox" value="option1">
            <span class="checkbox-label">1</span>
        </label>
        <label class="checkbox-custom checkbox-inline">
            <input checked="checked" type="checkbox" value="option2">
            <span class="checkbox-label">2</span>
        </label>
        <label class="checkbox-custom checkbox-inline">
            <input disabled="disabled" type="checkbox" value="option3">
            <span class="checkbox-label">3</span>
        </label>
    </div>

{% highlight html %}
<label class="checkbox-custom checkbox-inline">
  <input type="checkbox" value="option1">
  <span class="checkbox-label">1</span>
</label>
<label class="checkbox-custom checkbox-inline">
  <input checked="checked" type="checkbox" value="option2">
  <span class="checkbox-label">2</span>
</label>
<label class="checkbox-custom checkbox-inline">
  <input disabled="disabled" type="checkbox" value="option3">
  <span class="checkbox-label">3</span>
</label>
{% endhighlight %}

    <h4>Element toggling checkboxes</h4>
    <p>Use the <code>data-toggle="{{selector}}"</code> to automatically show/hide elements matching the selector within the body upon check/uncheck. <strong>(works with any <a href="http://api.jquery.com/category/selectors/">jQuery selector</a>)</strong></p>
    <div class="bs-example">
        <div class="form-group">
            <div class="checkbox">
                <label class="checkbox-custom">
                    <input data-toggle="#checkboxToggleID" type="checkbox" value="option1">
                    <span class="checkbox-label">Toggles element with matching id.</span>
                </label>
            </div>
            <label class="checkbox-custom checkbox-inline">
                <input data-toggle=".checkboxToggleCLASS" type="checkbox" value="option1">
                <span class="checkbox-label">Toggles elements with matching class.</span>
            </label>
        </div>
        <div class="alert bg-info" id="checkboxToggleID" style="display: none;">Id toggling container.</div>
        <div class="alert bg-success checkboxToggleCLASS" style="display: none;">Class toggling container.</div>
        <div class="alert bg-success checkboxToggleCLASS" style="display: none;">Class toggling container.</div>
    </div>
{% highlight html %}
<div class="checkbox">
  <label class="checkbox-custom">
    <input data-toggle="#checkboxToggleID" type="checkbox" value="option1">
    Toggles element with matching id.
  </label>
</div>
<label class="checkbox-custom checkbox-inline">
  <input data-toggle=".checkboxToggleCLASS" type="checkbox" value="option1">
  Toggles elements with matching class.
</label>

<div class="alert bg-info" id="checkboxToggleID" style="display: none;">ID toggling container.</div>
<div class="alert bg-success checkboxToggleCLASS" style="display: none;">Class toggling container.</div>
<div class="alert bg-success checkboxToggleCLASS" style="display: none;">Class toggling container.</div>
{% endhighlight %}

    <h4>Highlighting checkboxes</h4>
    <p>Use the <code>.highlight</code> class to add a background highlight upon check.
    </p>
    <div class="bs-example">
        <div class="checkbox highlight">
            <label class="checkbox-custom">
                <input type="checkbox" value="option1">
                This block-level checkbox will be highlighted on check.
            </label>
        </div>
        <label class="checkbox-custom checkbox-inline highlight">
            <input type="checkbox" value="option2">
            This inline checkbox will be highlighted on check.
        </label>
    </div>
{% highlight html %}
<div class="checkbox highlight">
  <label class="checkbox-custom">
    <input type="checkbox" value="option1">
    This block-level checkbox will be highlighted on check.
  </label>
</div>
<label class="checkbox-custom checkbox-inline highlight">
  <input type="checkbox" value="option2">
  This inline checkbox will be highlighted on check.
</label>{% endhighlight %}

    <h2 id="checkboxes-usage">Usage</h2>
  <p>The checkbox code will automatically instantiate any checkboxes with the class <code>.scheduler</code> on page load, allowing them to function without any additional code. However, if the markup is added after page load they will need to be manually instantiated via Javascript.</p>

    <p>Initialize the checkbox manually via JavaScript:</p>
{% highlight js %}$('#MyCheckbox').checkbox();{% endhighlight %}
=======
{% include js/combobox.html %}
>>>>>>> a51b88ec76f31c70087b25c475db9328aa899edd

{% include js/infinite-scroll.html %}

{% include js/loader.html %}
		
{% include js/pillbox.html %}

{% include js/placard.html %}

{% include js/radio.html %}

{% include js/repeater.html %}

{% include js/scheduler.html %}

{% include js/search.html %}

{% include js/selectlist.html %}

{% include js/spinbox.html %}

{% include js/tree.html %}

{% include js/wizard.html %}
